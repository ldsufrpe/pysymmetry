{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PySymmetry","text":"<p>A Python library for applying group representation theory to problems with symmetry.</p>"},{"location":"#about-the-project","title":"About the Project","text":"<p><code>PySymmetry</code> is a powerful tool built on SageMath designed to simplify complex computational problems by leveraging their underlying symmetries. Many problems in physics, engineering, and mathematics involve systems that are symmetric under certain transformations (like rotations or reflections). These symmetries can be mathematically described using group theory.</p> <p>The core feature of this library is the block diagonalization of equivariant operators. By finding a symmetry-adapted basis, <code>PySymmetry</code> can transform a large, complex matrix into a set of smaller, independent block matrices. This decomposition significantly simplifies subsequent calculations, such as finding eigenvalues, and can lead to substantial performance improvements.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>FiniteGroup and Representation Theory Tools: Provides an intuitive interface for working with permutation groups and their matrix representations.</li> <li>Automatic Block Decomposition: Implements algorithms to find the symmetry-adapted basis and automatically block-diagonalize equivariant matrices.</li> <li>Performance: Accelerates calculations by breaking down large problems into smaller, more manageable ones. The library includes parallel processing capabilities to speed up computations.</li> <li>Built on SageMath: Leverages the extensive mathematical capabilities of the SageMath ecosystem.</li> </ul>"},{"location":"#quick-example-eigenvalues-of-a-1d-laplacian","title":"Quick Example: Eigenvalues of a 1D Laplacian","text":"<p>Let's find the eigenvalues of a 1D Laplacian operator, a common problem in physics. Using <code>PySymmetry</code>, we can exploit the reflection symmetry of the system to simplify the calculation.</p> <pre><code># 1. Import the library and create the operator\nfrom pysymmetry import FiniteGroup, representation\nfrom pysymmetry.util import laplacian1d, get_block\nimport numpy as np\n\nn = 100\nM = laplacian1d(n)\n\n# 2. Define the symmetry group (in this case, a simple reflection)\ndef generators1d(n):\n    string_reflexao_sigma = ''\n    # Note: Integer division for compatibility\n    for j in range(1, (n // 2 + 1)):\n        string_reflexao_sigma += str((j, n - j + 1))\n    return [string_reflexao_sigma]\n\nG = FiniteGroup(generators1d(n))\n\n# 3. Get the natural representation and the symmetry-adapted basis\nrep = G.natural_representation()\nbase_info, _ = G.base_change_eigenvalue_reduction_new(rep)\n\n# 4. Get the blocks from the original matrix\n# This is much faster than calculating eigenvalues for the full matrix M\nblocks = [get_block(info[0], M) for info in base_info]\neigenvalues_from_blocks = sorted(np.concatenate(\n    [np.linalg.eigvals(b.toarray()) for b in blocks]\n))\n</code></pre> <p>The <code>eigenvalues_from_blocks</code> will be identical to the eigenvalues of the full <code>M</code> matrix, but they are computed more efficiently from the smaller blocks.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li> <p>API Reference: Dive into the details of the available functions and classes.</p> </li> <li> <p>Installation: Learn how to install pysymmetry in your own projects.</p> </li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>This page provides a detailed reference for the <code>pysymmetry</code> library's public API. The content is automatically generated from the docstrings in the source code.</p>"},{"location":"api/#core-module-pysymmetry","title":"Core Module (<code>pysymmetry</code>)","text":"<p>This is the main module containing the core classes and functions for working with group theory and representations.</p>"},{"location":"api/#pysymmetry.FiniteGroup","title":"<code>pysymmetry.FiniteGroup</code>","text":"<p>               Bases: <code>PermutationGroup_generic</code></p>"},{"location":"api/#pysymmetry.FiniteGroup.base_change_eigenvalue_reduction_new","title":"<code>base_change_eigenvalue_reduction_new(right, block_prevision=False)</code>","text":"<p>Return part of basis change matrix associated to a symmetry adapted basis to an equivariant operator of right.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>right</code> -- representation ; a representation defined over the same group as self.        </li> <li><code>block_prevision</code> -- a boolean (default: <code>False</code>) ; if set to True then prints a string describing the number and orders of blocks to an equivariant operator under right.</li> </ul> <p>OUTPUT: A list of basis subespaces, along with degree and multiplicitie(number of equivalent copies). The restriction of an equivariant operator to each subespace gives a different block matrix of the equivariant operator relative to the symmetry adapted basis. In short, these are parts of the symmetry adapted basis that no generates block repetitions.</p> <p>EXAMPLES:</p> <p>We define the representation by permutation on the cyclic group of four elements and calculates the subspaces that gives one copy of each block of the equivariant operator under this representation  ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: G.base_change_eigenvalue_reduction_new(rep)\n([[\n[1]        \n[1]        \n[1]        \n[1], [1, 1]\n],\n  [\n[ 1]        \n[-1]        \n[ 1]        \n[-1], [1, 1]\n],\n  [\n[ 1]        \n[ I]        \n[-1]        \n[-I], [1, 1]\n],\n  [\n[ 1]        \n[-I]        \n[-1]        \n[ I], [1, 1]\n]],\n [['degree', 'multiplicity'], [1, 1], [1, 1], [1, 1], [1, 1]])\n\nsage: G.base_change_eigenvalue_reduction_new(rep, block_prevision=True)\n1 block size 1x1\n1 block size 1x1\n1 block size 1x1\n1 block size 1x1\n([[\n[1]        \n[1]        \n[1]        \n[1], [1, 1]\n],\n  [\n[ 1]        \n[-1]        \n[ 1]        \n[-1], [1, 1]\n],\n  [\n[ 1]        \n[ I]        \n[-1]        \n[-I], [1, 1]\n],\n  [\n[ 1]        \n[-I]        \n[-1]        \n[ I], [1, 1]\n]],\n [['degree', 'multiplicity'], [1, 1], [1, 1], [1, 1], [1, 1]])\n</code></pre> <p>We define a representation on the permutation group, and calculates parts of the symmetry adapted basis that generates no repetition in the blocks of an equivariant operator  ::</p> <pre><code>sage: G = FiniteGroup(['(2,4)(3,7)(6,8)', '(1,3)(4,6)(7,9)'])\nsage: gens = G.gens()\nsage: matrices = [g.matrix() for g in gens]\nsage: rep = representation(gens, matrices)\nsage: G.base_change_eigenvalue_reduction_new(rep)\n([[\n[2 0 0]        \n[0 2 0]        \n[2 0 0]        \n[0 2 0]        \n[0 0 8]        \n[0 2 0]        \n[2 0 0]        \n[0 2 0]        \n[2 0 0], [1, 3]\n],\n  [\n[ 2]        \n[ 0]        \n[-2]        \n[ 0]        \n[ 0]        \n[ 0]        \n[-2]        \n[ 0]        \n[ 2], [1, 1]\n],\n  [\n[ 0]        \n[ 2]        \n[ 0]        \n[-2]        \n[ 0]        \n[-2]        \n[ 0]        \n[ 2]        \n[ 0], [1, 1]\n],\n  [\n[ 2  0]        \n[ 0  1]        \n[ 0  0]        \n[ 0  1]        \n[ 0  0]        \n[ 0 -1]        \n[ 0  0]        \n[ 0 -1]        \n[-2  0], [2, 2]\n]],\n [['degree', 'multiplicity'], [1, 3], [1, 1], [1, 1], [2, 2]])\n</code></pre> <p>We define the regular representation(reg) over the symmetric group of 3 simbols and calculate the subspaces that gives all the blocks of an equivariant operator without repetition ::</p> <pre><code>sage: H = SymmetricGroup(3)\nsage: G = FiniteGroup(H);\nsage: reg = G.regular_representation();\nsage: G.base_change_eigenvalue_reduction_new(reg,block_prevision=True)\n1 block size 1x1\n1 block size 1x1\n2 block size 2x2\n([[\n[1]        \n[1]        \n[1]        \n[1]        \n[1]        \n[1], [1, 1]\n],\n  [\n[ 1]        \n[ 1]        \n[ 1]        \n[-1]        \n[-1]        \n[-1], [1, 1]\n],\n  [\n[                                         1                                          0]\n[-0.500000000000000? + 0.866025403784439?*I                                          0]\n[-0.500000000000000? - 0.866025403784439?*I                                          0]\n[                                         0                                          1]\n[                                         0 -0.500000000000000? - 0.866025403784439?*I]\n[                                         0 -0.500000000000000? + 0.866025403784439?*I],\n\n[2, 2]\n]],\n [['degree', 'multiplicity'], [1, 1], [1, 1], [2, 2]])\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.base_to_irreducibles","title":"<code>base_to_irreducibles(right)</code>","text":"<p>Return the basis change matrix associated to a decomposition of right into irreducibles representations.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>right</code> -- representation ; a representation defined over the same group as self.</li> </ul> <p>OUTPUT: A change basis matrix that decomposes right in its irreducible components.</p> <p>EXAMPLES:</p> <p>We define the representation by permutation on the cyclic group of four elements and calculate its decomposition into irreducibles(Note that in this case because multiplicity we get the same result with the isotypic base)  ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: A = G.base_to_irreducibles(rep); A\n[ 1  1  1  1]\n[ 1 -1  I -I]\n[ 1  1 -1 -1]\n[ 1 -1 -I  I]\n\nsage: [rep(g).matrix() for g in G]\n[\n[1 0 0 0]  [0 1 0 0]  [0 0 1 0]  [0 0 0 1]\n[0 1 0 0]  [0 0 1 0]  [0 0 0 1]  [1 0 0 0]\n[0 0 1 0]  [0 0 0 1]  [1 0 0 0]  [0 1 0 0]\n[0 0 0 1], [1 0 0 0], [0 1 0 0], [0 0 1 0]\n]\n\nsage: [A.inverse()*rep(g).matrix()*A for g in G]\n[\n[1 0 0 0]  [ 1  0  0  0]  [ 1  0  0  0]  [ 1  0  0  0]\n[0 1 0 0]  [ 0 -1  0  0]  [ 0  1  0  0]  [ 0 -1  0  0]\n[0 0 1 0]  [ 0  0  I  0]  [ 0  0 -1  0]  [ 0  0 -I  0]\n[0 0 0 1], [ 0  0  0 -I], [ 0  0  0 -1], [ 0  0  0  I]\n]\n</code></pre> <p>We define a representation on the group of symmetries of regular hexagon and calculate its matrix change basis to decomposing into irreducible blocks ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: P = matrix([[5,3,4],[0,3,4],[0,0,4]]);P\nsage: matrices = [P.inverse()*matrix([[1,0,0],[0,1/2,-sqrt(3)/2],[0,sqrt(3)/2,1/2]])*P,P.inverse()*matrix([[1,0,0],[0,-1,0],[0,0,1]])*P];\nsage: rep = representation(generators, matrices, field=QQbar)\nsage: G = rep.domain()\nsage: B = G.base_to_irreducibles(rep); \nsage: view(B,latex=False) # This function creates a better visualization of the matrix\n[        12       -9/5      -54/5]\n[         0    3*I + 3 -18*I + 18]\n[         0     -9/4*I     27/2*I]\n\nsage: [view(rep(g).matrix(), latex=False) for g in G]\n[\n[1 0 0]  [                 1               9/10 -2/5*sqrt(3) + 6/5]\n[0 1 0]  [                 0  1/2*sqrt(3) - 1/2        4*sqrt(1/3)]\n[0 0 1], [                 0       -3/8*sqrt(3) -1/2*sqrt(3) - 1/2],\n\n[                 1               9/10  2/5*sqrt(3) + 6/5]\n[                 0 -1/2*sqrt(3) - 1/2       -4*sqrt(1/3)]\n[                 0        3/8*sqrt(3)  1/2*sqrt(3) - 1/2],\n\n[                 1               3/10 -2/5*sqrt(3) + 2/5]\n[                 0  1/2*sqrt(3) + 1/2        4*sqrt(1/3)]\n[                 0       -3/8*sqrt(3) -1/2*sqrt(3) + 1/2],\n\n[  1 6/5 8/5]\n[  0  -1   0]\n[  0   0  -1],\n\n[                 1               3/10  2/5*sqrt(3) + 2/5]\n[                 0 -1/2*sqrt(3) + 1/2       -4*sqrt(1/3)]\n[                 0        3/8*sqrt(3)  1/2*sqrt(3) + 1/2],\n\n[  1   0   0]\n[  0   1 8/3]\n[  0   0  -1],\n\n[                 1               9/10 -2/5*sqrt(3) + 6/5]\n[                 0 -1/2*sqrt(3) - 1/2               -4/3]\n[                 0        3/8*sqrt(3)  1/2*sqrt(3) + 1/2],\n\n[                 1               9/10  2/5*sqrt(3) + 6/5]\n[                 0  1/2*sqrt(3) - 1/2               -4/3]\n[                 0       -3/8*sqrt(3) -1/2*sqrt(3) + 1/2],\n\n[                 1               3/10 -2/5*sqrt(3) + 2/5]\n[                 0 -1/2*sqrt(3) + 1/2                4/3]\n[                 0        3/8*sqrt(3)  1/2*sqrt(3) - 1/2],\n\n[   1  6/5  8/5]\n[   0   -1 -8/3]\n[   0    0    1],\n\n[                 1               3/10  2/5*sqrt(3) + 2/5]\n[                 0  1/2*sqrt(3) + 1/2                4/3]\n[                 0       -3/8*sqrt(3) -1/2*sqrt(3) - 1/2]\n]\n\nsage: [view(B.inverse()*rep(g).matrix()*B, latex=False) for g in G]\n[\n[1 0 0]\n[0 1 0]\n[0 0 1],\n\n[                   1                    0                    0]\n[                   0 -1/2*I*sqrt(3) - 1/2                    0]\n[                   0                    0  1/2*I*sqrt(3) - 1/2],\n\n[                   1                    0                    0]\n[                   0  1/2*I*sqrt(3) - 1/2                    0]\n[                   0                    0 -1/2*I*sqrt(3) - 1/2],\n\n[                   1                    0                    0]\n[                   0 -1/2*I*sqrt(3) + 1/2                    0]\n[                   0                    0  1/2*I*sqrt(3) + 1/2],\n\n[ 1  0  0]\n[ 0 -1  0]\n[ 0  0 -1],\n\n[                   1                    0                    0]\n[                   0  1/2*I*sqrt(3) + 1/2                    0]\n[                   0                    0 -1/2*I*sqrt(3) + 1/2],\n\n[  1   0   0]  [                      1                       0                       0]\n[  0   0   6]  [                      0                       0         3*I*sqrt(3) - 3]\n[  0 1/6   0], [                      0 -1/4*I*sqrt(1/3) - 1/12                       0],\n\n[                     1                      0                      0]  [                      1                       0                       0]\n[                     0                      0       -3*I*sqrt(3) - 3]  [                      0                       0         3*I*sqrt(3) + 3]\n[                     0 1/4*I*sqrt(1/3) - 1/12                      0], [                      0 -1/4*I*sqrt(1/3) + 1/12                       0],\n\n[   1    0    0]\n[   0    0   -6]\n[   0 -1/6    0],\n\n[                     1                      0                      0]\n[                     0                      0       -3*I*sqrt(3) + 3]\n[                     0 1/4*I*sqrt(1/3) + 1/12                      0]\n]\n</code></pre> <p>We define the regular representation over the symmetric group of 3 simbols and we decompose into irreducible components ::</p> <pre><code>sage: G = FiniteGroup(SymmetricGroup(3)) \nsage: reg = G.regular_representation();\nsage: C = G.base_to_irreducibles(reg); \nsage: view(C, latex=False) # This Function creates a better visualization of the matrix\n[                   1                    1                    1                    0                    0                    3]\n[                   1                    1  1/2*I*sqrt(3) - 1/2                    0                    0 -3/2*I*sqrt(3) - 3/2]\n[                   1                    1 -1/2*I*sqrt(3) - 1/2                    0                    0  3/2*I*sqrt(3) - 3/2]\n[                   1                   -1                    0                    3                    1                    0]\n[                   1                   -1                    0  3/2*I*sqrt(3) - 3/2 -1/2*I*sqrt(3) - 1/2                    0]\n[                   1                   -1                    0 -3/2*I*sqrt(3) - 3/2  1/2*I*sqrt(3) - 1/2                    0]\n\nsage: g = G.an_element();\nsage: reg(g).matrix()\n[0 0 0 0 0 1]\n[0 0 0 1 0 0]\n[0 0 0 0 1 0]\n[0 1 0 0 0 0]\n[0 0 1 0 0 0]\n[1 0 0 0 0 0]\n\nsage: A = C.inverse()*reg(g).matrix()*C;\nsage: view(A, latex=False)\n[                    1                     0                     0                     0                     0                     0]\n[                    0                    -1                     0                     0                     0                     0]\n[                    0                     0                     0  -3/2*I*sqrt(3) - 3/2                     0                     0]\n[                    0                     0 1/2*I*sqrt(1/3) - 1/6                     0                     0                     0]\n[                    0                     0                     0                     0                     0  -3/2*I*sqrt(3) - 3/2]\n[                    0                     0                     0                     0 1/2*I*sqrt(1/3) - 1/6                     0]\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.base_equivariant_to_blocks","title":"<code>base_equivariant_to_blocks(right, row=0)</code>","text":"<p>Return the basis change matrix associated to a symmetry adapted basis to an equivariant operator of right.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>right</code> -- representation ; a representation defined over the same group as self.</li> <li><code>row</code> -- an integer (default: 0) ; an integer in the range of the degree of right, this number will choose the set o projectors to be chosen in the contruction of the base :: </li> </ul> <p>OUTPUT: A change basis matrix that decomposes the equivariant operator.</p> <p>EXAMPLES:</p> <p>We define the representation by permutation on the cyclic group of four elements and decompose an equivariant operator under this representation  ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: A = matrix.circulant([1,2,3,4])\nsage: rep.is_equivariant_to(A)\nTrue\nsage: P = G.base_equivariant_to_blocks(rep); P\n[ 1  1  1  1]\n[ 1 -1  I -I]\n[ 1  1 -1 -1]\n[ 1 -1 -I  I]\nsage: A, P.inverse()*A*P\n(\n[1 2 3 4]  [      10        0        0        0]\n[4 1 2 3]  [       0       -2        0        0]\n[3 4 1 2]  [       0        0 -2*I - 2        0]\n[2 3 4 1], [       0        0        0  2*I - 2]\n)\n</code></pre> <p>We define a representation on the permutation group, and decompose an equivariant operator  ::</p> <pre><code>sage: G = FiniteGroup(['(2,4)(3,7)(6,8)', '(1,3)(4,6)(7,9)'])\nsage: gens = G.gens()\nsage: matrices = [g.matrix() for g in gens]\nsage: rep = representation(gens, matrices)\nsage: operator = matrix([[ 4, -1, -0, -1, -0, -0, -0, -0, -0],\n                        [-1,  4, -1, -0, -1, -0, -0, -0, -0],\n                        [-0, -1,  4, -0, -0, -1, -0, -0, -0],\n                        [-1, -0, -0,  4, -1, -0, -1, -0, -0],\n                        [-0, -1, -0, -1,  4, -1, -0, -1, -0],\n                        [-0, -0, -1, -0, -1,  4, -0, -0, -1],\n                        [-0, -0, -0, -1, -0, -0,  4, -1, -0],\n                        [-0, -0, -0, -0, -1, -0, -1,  4, -1],\n                        [-0, -0, -0, -0, -0, -1, -0, -1,  4]])\nsage: rep.is_equivariant_to(operator)\nTrue\nsage: P = G.base_equivariant_to_blocks(rep); P\n[ 2  0  0  2  0  2  0  0  0]\n[ 0  2  0  0  2  0  1  0  4]\n[ 2  0  0 -2  0  0  0  8  0]\n[ 0  2  0  0 -2  0  1  0 -4]\n[ 0  0  8  0  0  0  0  0  0]\n[ 0  2  0  0 -2  0 -1  0  4]\n[ 2  0  0 -2  0  0  0 -8  0]\n[ 0  2  0  0  2  0 -1  0 -4]\n[ 2  0  0  2  0 -2  0  0  0]\nsage: operator, P.inverse()*operator*P\n(\n[ 4 -1  0 -1  0  0  0  0  0]  [ 4 -2  0  0  0  0  0  0  0]\n[-1  4 -1  0 -1  0  0  0  0]  [-2  4 -4  0  0  0  0  0  0]\n[ 0 -1  4  0  0 -1  0  0  0]  [ 0 -1  4  0  0  0  0  0  0]\n[-1  0  0  4 -1  0 -1  0  0]  [ 0  0  0  4  0  0  0  0  0]\n[ 0 -1  0 -1  4 -1  0 -1  0]  [ 0  0  0  0  4  0  0  0  0]\n[ 0  0 -1  0 -1  4  0  0 -1]  [ 0  0  0  0  0  4 -1  0  0]\n[ 0  0  0 -1  0  0  4 -1  0]  [ 0  0  0  0  0 -2  4  0  0]\n[ 0  0  0  0 -1  0 -1  4 -1]  [ 0  0  0  0  0  0  0  4 -1]\n[ 0  0  0  0  0 -1  0 -1  4], [ 0  0  0  0  0  0  0 -2  4]\n)\n</code></pre> <p>TO ADD MORE EXAMPLES TO ADD MORE EXAMPLES TO ADD MORE EXAMPLES</p> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.irreducible_representations","title":"<code>irreducible_representations(show_table=True)</code>","text":"<p>Return the number n of irreducible representations of self and the irreducibles representations.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>show_table</code> -- a boolean (default: <code>True</code>) ; shows a table of each irreducible representation applied at the generators of self.</li> </ul> If show_table=True; return number of irreducible representions and irreducible representions themselves. <p>If show_table=False; return the irreducible representions themselves. </p> <p>EXAMPLES:</p> <p>We define the symmetric group of 4 simbols and calculate its irreducible representations ::</p> <pre><code>sage: G = FiniteGroup(SymmetricGroup(4));\nsage: n, irr = G.irreducible_representations(False) #Irreducible representations\nsage: n\n5\nsage: irr(0)\nMap: \n From: Permutation FiniteGroup with generators [(1,2), (1,2,3,4)] \n To: Matrix group over Integer Ring with 2 generators ([1], [1]).\n\nsage: irr(4)\nMap: \n From: Permutation FiniteGroup with generators [(1,2), (1,2,3,4)] \n To: Matrix group over Integer Ring with 2 generators (\n[ 0  1  0]  [ 0  0 -1]\n[ 1  0  0]  [ 0  1  0]\n[ 0  0 -1], [ 1  0  0]\n).\n</code></pre> <p>We define the representation by permutation on the cyclic group calculate its irreducible representations ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(6))\nsage: irr = G.irreducible_representations(True) #Irreducible representations\n||||||SAIDA A SER PENSADA|||||||\n</code></pre> <p>We calculate the irreducible representations of the group of symmetries of a regular tetrahedron ::</p> <pre><code>sage: G = FiniteGroup(AlternatingGroup(4));\nsage: irr = G.irreducible_representations(True) #Irreducible representations\nsage: for j in range(n):\n ||||||SAIDA A SER PENSADA|||||||\n</code></pre> <p>We define the group of symmetries of regular hexagon and calculate its irreducible representations  ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: G = FiniteGroup(PermutationGroup(generators))\nsage: n,irr = G.irreducible_representations(False) #Irreducible representations\nsage: for j in range(n):\n        print(irr(j))\nMap: \n From: Permutation FiniteGroup with generators [(1,2,3,4,5,6), (1,4)(2,3)(5,6)] \n To: Matrix group over Integer Ring with 2 generators ([1], [1]).\nMap: \n From: Permutation FiniteGroup with generators [(1,2,3,4,5,6), (1,4)(2,3)(5,6)] \n To: Matrix group over Integer Ring with 2 generators ([1], [-1]).\nMap: \n From: Permutation FiniteGroup with generators [(1,2,3,4,5,6), (1,4)(2,3)(5,6)] \n To: Matrix group over Integer Ring with 2 generators ([-1], [-1]).\nMap: \n From: Permutation FiniteGroup with generators [(1,2,3,4,5,6), (1,4)(2,3)(5,6)] \n To: Matrix group over Integer Ring with 2 generators ([-1], [1]).\nMap: \n From: Permutation FiniteGroup with generators [(1,2,3,4,5,6), (1,4)(2,3)(5,6)] \n To: Matrix group over Universal Cyclotomic Field with 2 generators (\n[E(3)^2      0]  [0 1]\n[     0   E(3)], [1 0]\n).\nMap: \n From: Permutation FiniteGroup with generators [(1,2,3,4,5,6), (1,4)(2,3)(5,6)] \n To: Matrix group over Universal Cyclotomic Field with 2 generators (\n[-E(3)^2       0]  [ 0 -1]\n[      0   -E(3)], [-1  0]\n).\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.isotypic_base","title":"<code>isotypic_base(rep, isotypic_components=False)</code>","text":"<p>Return a list with the basis for each isotypic components of rep or the basis change matrix associated to the isotypic decomposition.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>rep</code> -- representation ; a representation defined over the same group as self.</li> <li><code>isotypic_components</code> -- a boolean (default: <code>False</code>) ; if False returns the change base matrix, if True returns a list with a base for each isotypic component :: </li> </ul> <p>OUTPUT: A list with a basis for each isotypic subspace of rep or the change basis matrix to a form in blocks associated to isotypic components of rep.</p> <p>EXAMPLES:</p> <p>We define the symmetric group of 3 simbols change basis matrix associated to the isotypic decomposition  ::</p> <pre><code>sage: G = FiniteGroup(SymmetricGroup(3));\nsage: reg = G.regular_representation();\nsage: G.isotypic_base(reg, isotypic_components=False)\n[ 1| 1| 2 -1  0  0]\n[ 1| 1|-1  2  0  0]\n[ 1| 1|-1 -1  0  0]\n[ 1|-1| 0  0  2 -1]\n[ 1|-1| 0  0 -1  2]\n[ 1|-1| 0  0 -1 -1]\n</code></pre> <p>The isotypic basis for each irreducible subspace associated to the regular representation of this group ::</p> <pre><code>sage: G.isotypic_base(reg, isotypic_components=True)\n[\n[1]  [ 1]  [ 2 -1  0  0]\n[1]  [ 1]  [-1  2  0  0]\n[1]  [ 1]  [-1 -1  0  0]\n[1]  [-1]  [ 0  0  2 -1]\n[1]  [-1]  [ 0  0 -1  2]\n[1], [-1], [ 0  0 -1 -1]\n]\n</code></pre> <p>We define the representation by permutation on the cyclic group and calculate its isotypic decompositions ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: G.isotypic_base(rep, isotypic_components=True)\n[\n[1]  [ 1]  [   1]  [   1]\n[1]  [-1]  [ 1*I]  [-1*I]\n[1]  [ 1]  [  -1]  [  -1]\n[1], [-1], [-1*I], [ 1*I]\n]\n\nsage: change_basis = G.isotypic_base(rep, isotypic_components=False); change_basis\n[   1|   1|   1|   1]\n[   1|  -1| 1*I|-1*I]\n[   1|   1|  -1|  -1]\n[   1|  -1|-1*I| 1*I]\nsage: [rep(g).matrix() for g in G]\n[\n[1 0 0 0]  [0 1 0 0]  [0 0 1 0]  [0 0 0 1]\n[0 1 0 0]  [0 0 1 0]  [0 0 0 1]  [1 0 0 0]\n[0 0 1 0]  [0 0 0 1]  [1 0 0 0]  [0 1 0 0]\n[0 0 0 1], [1 0 0 0], [0 1 0 0], [0 0 1 0]\n]\nsage: [change_basis.inverse()*rep(g).matrix()*change_basis for g in G]\n[\n[1 0 0 0]  [   1    0    0    0]  [ 1  0  0  0]  [   1    0    0    0]\n[0 1 0 0]  [   0   -1    0    0]  [ 0  1  0  0]  [   0   -1    0    0]\n[0 0 1 0]  [   0    0  1*I    0]  [ 0  0 -1  0]  [   0    0 -1*I    0]\n[0 0 0 1], [   0    0    0 -1*I], [ 0  0  0 -1], [   0    0    0  1*I]\n]\n</code></pre> <p>We define a representation the group of symmetries of regular hexagon and calculate their matrix change basis(this representation is irreducible) ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: matrices = [matrix([[1/2,-sqrt(3)/2],[sqrt(3)/2,1/2]]),matrix([[-1,0],[0,1]])];\nsage: rep = representation(generators, matrices)\nsage: G = rep.domain()\nsage: G.isotypic_base(rep, isotypic_components=True)\n[\n[6 0]\n[0 6]\n]\n</code></pre> <p>TO ADD MORE EXAMPLES TO ADD MORE EXAMPLES TO ADD MORE EXAMPLES</p> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.isotypic_projection","title":"<code>isotypic_projection(right)</code>","text":"<p>Return a list containing the matrices associated to projections operators over the isotypic components(or conglomerates) of right.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>right</code> -- representation ; a representation defined over the same group as self.</li> </ul> <p>OUTPUT: A list of matrices representing the projections operators over the isotypics subespaces of right.</p> <p>EXAMPLES:</p> <p>We define the symmetric group of 3 simbols and the isotypic projections associated to the regular representation of this group ::</p> <pre><code>sage: G = FiniteGroup(SymmetricGroup(3));\nsage: reg = G.regular_representation();\nsage: G.isotypic_projection(reg)\n [\n [1 1 1 1 1 1]  [ 1  1  1 -1 -1 -1]  [ 2 -1 -1  0  0  0]\n [1 1 1 1 1 1]  [ 1  1  1 -1 -1 -1]  [-1  2 -1  0  0  0]\n [1 1 1 1 1 1]  [ 1  1  1 -1 -1 -1]  [-1 -1  2  0  0  0]\n [1 1 1 1 1 1]  [-1 -1 -1  1  1  1]  [ 0  0  0  2 -1 -1]\n [1 1 1 1 1 1]  [-1 -1 -1  1  1  1]  [ 0  0  0 -1  2 -1]\n [1 1 1 1 1 1], [-1 -1 -1  1  1  1], [ 0  0  0 -1 -1  2]\n  ]\n</code></pre> <p>We calculate an irreducible representation of G, and the isotypic projection associated ::</p> <pre><code>sage: n,irr = G.irreducible_representations(False) #Irreducible representations\nsage: G.isotypic_projection(irr(2))\n[\n[3 0]\n[0 3]\n]\n</code></pre> <p>We define the representation by permutation on the cyclic group and calculate the isotypic projectors ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: G.isotypic_projection(rep)\n[\n[1 1 1 1]  [ 1 -1  1 -1]  [   1 -1*I   -1  1*I]  [   1  1*I   -1 -1*I]\n[1 1 1 1]  [-1  1 -1  1]  [ 1*I    1 -1*I   -1]  [-1*I    1  1*I   -1]\n[1 1 1 1]  [ 1 -1  1 -1]  [  -1  1*I    1 -1*I]  [  -1 -1*I    1  1*I]\n[1 1 1 1], [-1  1 -1  1], [-1*I   -1  1*I    1], [ 1*I   -1 -1*I    1]\n]\n</code></pre> <p>We define a representation the group of symmetries of regular hexagon and calculate their isotypic projectors ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: rotation_pi_over_3, reflexion_about_x = matrix([[1/2,-sqrt(3)/2],[sqrt(3)/2,1/2]]),matrix([[-1,0],[0,1]])\nsage: matrices = [block_diagonal_matrix(rotation_pi_over_3, rotation_pi_over_3),block_diagonal_matrix(reflexion_about_x, reflexion_about_x)];\nsage: rep = representation(generators, matrices, field=SR)\nsage: G = rep.domain()\nsage: G.isotypic_projection(rep)\n[\n[6 0 0 0]\n[0 6 0 0]\n[0 0 6 0]\n[0 0 0 6]\n]\n</code></pre> <p>TO ADD MORE EXAMPLES TO ADD MORE EXAMPLES TO ADD MORE EXAMPLES</p> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.projection","title":"<code>projection(i, j, k, right, left=None)</code>","text":"<p>Return the projection(or transfers operators) associated to irreducible subrepresentations of right.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>right</code> -- representation ; a representation defined over the same group as self.</li> <li><code>i,j,k</code> --  integers ; integers numbers representing the projection(or transfer) chosen;         i- will choose the irreducible representation, and its range is from 0 until the number of irreducibles. ::<pre><code>j- choose a row of the matrix presentation of the irreducible, its range is the degree of chosen irreducible according i. ::\n\nk- choose a column of the matrix presentation of the irreducible, its range is the degree of chosen irreducible according i. ::\n</code></pre> </li> </ul> A matrix associated to the operator that projects over an irreducible subrepresentation of right(if j=k), or is a isomorphism between two equivalent subrepresentations of right. <p>Whenever the irreducible, chosen by index i, it is not a subrepresentation of right this matrix will be null.</p> <p>EXAMPLES:</p> <p>We define the representation by permutation on the cyclic group of four elements and calculate its projectors  ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: G.projection(0,0,0, rep)\n[1 1 1 1]\n[1 1 1 1]\n[1 1 1 1]\n[1 1 1 1]\nsage: n, irr = G.irreducible_representations(False)\nsage: list_of_projectors=[];\nfor i in range(n): # Choosing the irreducible\n    degree= irr(i).degree() # Calculation the degree of the irreducible\n    j=0;# we will use the first row\n    for k in range(degree):\n        projector = G.projection(i,j,k, rep);\n        list_of_projectors.append(projector)\nsage: list_of_projectors\n[\n[1 1 1 1]  [ 1 -1  1 -1]  [ 1 -I -1  I]  [ 1  I -1 -I]\n[1 1 1 1]  [-1  1 -1  1]  [ I  1 -I -1]  [-I  1  I -1]\n[1 1 1 1]  [ 1 -1  1 -1]  [-1  I  1 -I]  [-1 -I  1  I]\n[1 1 1 1], [-1  1 -1  1], [-I -1  I  1], [ I -1 -I  1]\n]\n</code></pre> <p>We define a representation on the group of symmetries of regular hexagon and calculate its projectors ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: matrices = [matrix([[1,0,0],[0,1/2,-sqrt(3)/2],[0,sqrt(3)/2,1/2]]),matrix([[1,0,0],[0,-1,0],[0,0,1]])];\nsage: rep = representation(generators, matrices)\nsage: G = rep.domain()\nsage: G.projection(0,0,0, rep)\n[     12       0       0]\n[      0       0 0.?e-18]\n[      0 0.?e-18       0]\nsage: n, irr = G.irreducible_representations(False)\nsage: list_of_projectors=[];\nfor i in range(n): # Choosing the irreducible\n    degree= irr(i).degree() # Calculation the degree of the irreducible\n    j=0;# we will use the first row\n    for k in range(degree):\n        projector = G.projection(i,j,k, rep);\n        list_of_projectors.append(view(projector, latex=False)) # view creates a better visualization\nsage: list_of_projectors\n[\n[12  0  0]  [0 0 0]  [0 0 0]  [0 0 0]  [0 0 0]  [0 0 0]\n[ 0  0  0]  [0 0 0]  [0 0 0]  [0 0 0]  [0 0 0]  [0 0 0]\n[ 0  0  0], [0 0 0], [0 0 0], [0 0 0], [0 0 0], [0 0 0],\n\n[   0    0    0]  [  0   0   0]\n[   0    3  3*I]  [  0   3 3*I]\n[   0 -3*I    3], [  0 3*I  -3]\n]\n</code></pre> <p>We define the regular representation over the symmetric group of 3 simbols and we calculate one of its projectors ::</p> <pre><code>sage: G = FiniteGroup(SymmetricGroup(3)) \nsage: reg = G.regular_representation();\nsage: view(G.projection(2,1,1, reg),latex=False) # The function view creates a better visualization\n[                   1  1/2*I*sqrt(3) - 1/2 -1/2*I*sqrt(3) - 1/2                    0                    0                    0]\n[-1/2*I*sqrt(3) - 1/2                    1  1/2*I*sqrt(3) - 1/2                    0                    0                    0]\n[ 1/2*I*sqrt(3) - 1/2 -1/2*I*sqrt(3) - 1/2                    1                    0                    0                    0]\n[                   0                    0                    0                    1 -1/2*I*sqrt(3) - 1/2  1/2*I*sqrt(3) - 1/2]\n[                   0                    0                    0  1/2*I*sqrt(3) - 1/2                    1 -1/2*I*sqrt(3) - 1/2]\n[                   0                    0                    0 -1/2*I*sqrt(3) - 1/2  1/2*I*sqrt(3) - 1/2                    1]\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.quick_block_prevision","title":"<code>quick_block_prevision(right, block_prevision=False)</code>","text":"<p>Return a list with order and multiplicities of blocks to an equivariant operator under right defined on self.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> <li><code>right</code> -- representation ; a representation defined over an arbitrary group given by self.</li> <li><code>block_prevision</code> -- a boolean (default: <code>False</code>) ; if set to True then prints a string describing the number and orders of blocks to an equivariant operator under right.</li> </ul> <p>OUTPUT: A list indicating the degree and multiplicity of the representation defined by right. </p> <p>EXAMPLES:</p> <p>We define the regular representation(reg) over the symmetric group of 4 simbols and calculate the structure of an equivariant operator under reg ::</p> <pre><code>sage: H = SymmetricGroup(4)\nsage: G = FiniteGroup(H);\nsage: reg = G.regular_representation();\nsage: G.quick_block_prevision(reg)\n[['degree', 'multiplicity'], [1, 1], [1, 1], [2, 2], [3, 3], [3, 3]]\n\nsage: G.quick_block_prevision(reg, block_prevision=True)\n1 block size 1x1\n1 block size 1x1\n2 block size 2x2\n3 block size 3x3\n3 block size 3x3\n[['degree', 'multiplicity'], [1, 1], [1, 1], [2, 2], [3, 3], [3, 3]]\n</code></pre> <p>We define the representation by permutation on the cyclic group and calculate the structure of an equivariant operator ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: G.quick_block_prevision(rep, block_prevision=True)\n1 block size 1x1\n1 block size 1x1\n1 block size 1x1\n1 block size 1x1\n[['degree', 'multiplicity'], [1, 1], [1, 1], [1, 1], [1, 1]]\n</code></pre> <p>We calculate the irreducible representations of the group of symmetries of tetrahedron and calculate the structure of an equivariant operator inder its irreducibles ::</p> <pre><code>sage: G = FiniteGroup(AlternatingGroup(4));\nsage: n,irr = G.irreducible_representations(False) ##Irreducible representations\nsage: for j in range(n):\n        print(G.quick_block_prevision(irr(j),block_prevision=True))\n1 block size 1x1\n[['degree', 'multiplicity'], [1, 1]]\n1 block size 1x1\n[['degree', 'multiplicity'], [1, 1]]\n1 block size 1x1\n[['degree', 'multiplicity'], [1, 1]]\n3 block size 1x1\n[['degree', 'multiplicity'], [3, 1]]\n</code></pre> <p>We define two representation rep and rep1 on the group of symmetries of regular hexagon and calculate the structure of an equivariant operator under each one ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: matrices = [matrix([[1/2,-sqrt(3)/2],[sqrt(3)/2,1/2]]),matrix([[-1,0],[0,1]])];\nsage: rep = representation(generators, matrices)\nsage: G = rep.domain()\nsage: G.quick_block_prevision(rep,block_prevision=True)\n2 block size 1x1\n[['degree', 'multiplicity'], [2, 1]]\n\nsage: P = matrix([[2,1],[15,2]]); #A change of basis\nsage: matrices1 = [ block_diagonal_matrix((P.inverse())*A*P, (P.inverse())*A*P) for A in matrices];\nsage: rep1 = representation(generators, matrices1)\nsage: G.quick_block_prevision(rep1,block_prevision=True)\n2 block size 2x2\n[['degree', 'multiplicity'], [2, 2]]\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.FiniteGroup.regular_representation","title":"<code>regular_representation()</code>","text":"<p>Return the regular representation defined over the group.</p> <p>INPUT:</p> <ul> <li><code>self</code> -- FiniteGroup ; a  Sage permutation group or a group of the class FiniteGroup.</li> </ul> <p>OUTPUT: The regular representation defined over the FiniteGroup given by self. </p> <p>EXAMPLES:</p> <p>We define the regular representation over the cyclic group of 4 elements ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4)) \nsage: reg = G.regular_representation()\nsage: [reg(g) for g in G]\n[Linear transformation associated with element g=(), represented by the non-singular matrix:\n [1 0 0 0]\n [0 1 0 0]\n [0 0 1 0]\n [0 0 0 1]\n Representation space: Vector space of dimension 4 over Algebraic Field\n ,\n Linear transformation associated with element g=(1,2,3,4), represented by the non-singular matrix:\n [0 0 0 1]\n [1 0 0 0]\n [0 1 0 0]\n [0 0 1 0]\n Representation space: Vector space of dimension 4 over Algebraic Field\n ,\n Linear transformation associated with element g=(1,3)(2,4), represented by the non-singular matrix:\n [0 0 1 0]\n [0 0 0 1]\n [1 0 0 0]\n [0 1 0 0]\n Representation space: Vector space of dimension 4 over Algebraic Field\n ,\n Linear transformation associated with element g=(1,4,3,2), represented by the non-singular matrix:\n [0 1 0 0]\n [0 0 1 0]\n [0 0 0 1]\n [1 0 0 0]\n Representation space: Vector space of dimension 4 over Algebraic Field\n ]\n</code></pre> <p>We define the group of symmetries of regular hexagon and the regular representation over this group ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: G = FiniteGroup(generators)\nsage: reg = G.regular_representation()\nsage: g = G.an_element()\nsage: reg(g)\nLinear transformation associated with element g=(1,3)(4,6), represented by the non-singular matrix:\n[0 0 0 0 0 0 0 0 1 0 0 0]\n[0 0 0 0 0 0 1 0 0 0 0 0]\n[0 0 0 0 0 0 0 1 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 1]\n[0 0 0 0 0 0 0 0 0 1 0 0]\n[0 0 0 0 0 0 0 0 0 0 1 0]\n[0 1 0 0 0 0 0 0 0 0 0 0]\n[0 0 1 0 0 0 0 0 0 0 0 0]\n[1 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 1 0 0 0 0 0 0 0]\n[0 0 0 0 0 1 0 0 0 0 0 0]\n[0 0 0 1 0 0 0 0 0 0 0 0]\nRepresentation space: Vector space of dimension 12 over Algebraic Field\n</code></pre> <p>We define the regular representation over the symmetric group of 4 simbols ::</p> <pre><code>sage: H = SymmetricGroup(4)\nsage: G = FiniteGroup(H);\nsage: reg = G.regular_representation();\nsage: g = G.an_element()\nsage: reg(g)\nLinear transformation associated with element g=(1,3,4), represented by the non-singular matrix:\n24 x 24 dense matrix over Algebraic Field\nRepresentation space: Vector space of dimension 24 over Algebraic Field\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul>"},{"location":"api/#pysymmetry.representation","title":"<code>pysymmetry.representation(generators, matrices, field=QQbar)</code>","text":"<p>Create a representation of an arbitrary group G.</p> <p>INPUT:</p> <ul> <li> <p><code>generators</code> -- list; generators of the group G.</p> </li> <li> <p><code>matrices</code> -- list; generators images in the same sequence of generators.</p> </li> <li> <p><code>field</code> -- Sage ring (default: <code>QQbar</code>); Field of the subjacent representation vector space. Faster computations using the fields <code>QQbar</code> or <code>AA</code>.</p> </li> </ul> <p>OUTPUT: Mapping of the group generated by <code>generators</code> to the group of matrices generated by <code>matrices</code>.</p> <p>EXAMPLES:</p> <p>This example illustrates the representation by permutation defined on the group of symmetries of the equilateral triangle ::</p> <pre><code>sage: G = DihedralGroup(3) \nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: rep\nMap: \n From: Permutation FiniteGroup with generators [(1,2,3), (1,3)] \n To: Matrix group over Algebraic Field with 2 generators (\n[0 1 0]  [0 0 1]\n[0 0 1]  [0 1 0]\n[1 0 0], [1 0 0]\n).\n</code></pre> <p>Matrix associated to an element g of G ::</p> <pre><code>sage: g = G.an_element()\nsage: rep(g).matrix()\n[0 1 0]\n[1 0 0]\n[0 0 1]\n</code></pre> <p>We define the generators of the group of symmetries of an regular hexagon, and the correspondent matrices of symmetry (a rotation through an angle $\\pi/3$, and a reflexion across the $x$ axis in the cartesian plane) ::</p> <pre><code>sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\nsage: matrices = [matrix([[1/2,-sqrt(3)/2],[sqrt(3)/2,1/2]]),matrix([[-1,0],[0,1]])]\nsage: rep = representation(generators, matrices)\nsage: rep(\"(1,2,3,4,5,6)\")\nLinear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n[                1/2 -0.866025403784439?]\n[ 0.866025403784439?                 1/2]\nRepresentation space: Vector space of dimension 2 over Algebraic Field\n\nsage: rep(\"(1,4)(2,3)(5,6)\")\nLinear transformation associated with element g=(1,4)(2,3)(5,6), represented by the non-singular matrix:\n[-1  0]\n[ 0  1]\nRepresentation space: Vector space of dimension 2 over Algebraic Field\n\nsage: (rep.domain()).is_isomorphic(DihedralGroup(6))\nTrue\n</code></pre> <p>Next we define the same representation where the field is choosed to be SR ::</p> <pre><code>sage: rep = representation(generators, matrices, field=SR)\nsage: rep(\"(1,2,3,4,5,6)\")\nLinear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n[         1/2 -1/2*sqrt(3)]\n[ 1/2*sqrt(3)          1/2]\nRepresentation space: Vector space of dimension 2 over Symbolic Ring\n</code></pre> <p>We choose a random element of the group and show its matrix ::</p> <pre><code>sage: G = FiniteGroup(generators)\nsage: g = G.an_element()\nsage: rep(g)\nLinear transformation associated with element g=(1,3)(4,6), represented by the non-singular matrix:\n[        -1/2 -1/2*sqrt(3)]\n[-1/2*sqrt(3)          1/2]\nRepresentation space: Vector space of dimension 2 over Symbolic Ring\n</code></pre> <p>The identity and inverse properties of the representation are illustred ::</p> <pre><code>sage: e = G.identity()\nsage: rep(e)\nLinear transformation associated with element g=(), represented by the non-singular matrix:\n[1 0]\n[0 1]\nRepresentation space: Vector space of dimension 2 over Symbolic Ring\nsage: [rep(g.inverse())==rep(g).inverse() for g in G]\n[True, True, True, True, True, True, True, True, True, True, True, True]\n</code></pre> <p>It is an error to choose the group element as a tuple ::</p> <pre><code>sage: rep((1,4)(2,3)(5,6))\nTypeError: Traceback (most recent call last):\n...\nTypeError: 'tuple' object is not callable\n\nsage: rep((1,2,3,4,5,6))\nTypeError: Traceback (most recent call last):\n...\nTypeError:  'tuple' object is not callable\n</code></pre> <p>The argument can be a string or a list. Be aware that '(1,2,3,4,5,6)' is the usual notation of cycle, while [1,2,3,4,5,6] lists the images of the permutation ::</p> <pre><code>sage: rep(\"(1,2,3,4,5,6)\")\nLinear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n[         1/2 -1/2*sqrt(3)]\n[ 1/2*sqrt(3)          1/2]\nRepresentation space: Vector space of dimension 2 over Symbolic Ring\n\nsage: rep([1,2,3,4,5,6])\nLinear transformation associated with element g=(), represented by the non-singular matrix:\n[1 0]\n[0 1]\nRepresentation space: Vector space of dimension 2 over Symbolic Ring\n\nsage: rep([2,3,4,5,6,1])\nLinear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n[         1/2 -1/2*sqrt(3)]\n[ 1/2*sqrt(3)          1/2]\nRepresentation space: Vector space of dimension 2 over Symbolic Ring\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul> Source code in <code>pysymmetry/pysymmetry.py</code> <pre><code>def representation(generators, matrices, field=QQbar):\n    r\"\"\"\n    Create a representation of an arbitrary group G.\n\n    INPUT:\n\n    - ``generators`` -- list; generators of the group G.\n\n    - ``matrices`` -- list; generators images in the same sequence of generators.\n\n    - ``field`` -- Sage ring (default: `QQbar`); Field of the subjacent representation vector space. Faster computations using the fields `QQbar` or `AA`.\n\n    OUTPUT: Mapping of the group generated by ``generators`` to the group of matrices generated by ``matrices``.\n\n\n    EXAMPLES:\n\n    This example illustrates the representation by permutation defined on the group of symmetries of the equilateral triangle ::\n\n        sage: G = DihedralGroup(3) \n        sage: generators = G.gens()\n        sage: matrices = [g.matrix() for g in generators]\n        sage: rep = representation(generators, matrices)\n        sage: rep\n        Map: \n         From: Permutation FiniteGroup with generators [(1,2,3), (1,3)] \n         To: Matrix group over Algebraic Field with 2 generators (\n        [0 1 0]  [0 0 1]\n        [0 0 1]  [0 1 0]\n        [1 0 0], [1 0 0]\n        ).\n\n    Matrix associated to an element g of G ::\n\n        sage: g = G.an_element()\n        sage: rep(g).matrix()\n        [0 1 0]\n        [1 0 0]\n        [0 0 1]        \n\n    We define the generators of the group of symmetries of an regular hexagon, and the correspondent matrices of symmetry (a rotation through an angle $\\pi/3$,\n    and a reflexion across the $x$ axis in the cartesian plane) ::\n\n        sage: generators = [\"(1,2,3,4,5,6)\",\"(1,4)(2,3)(5,6)\"]\n        sage: matrices = [matrix([[1/2,-sqrt(3)/2],[sqrt(3)/2,1/2]]),matrix([[-1,0],[0,1]])]\n        sage: rep = representation(generators, matrices)\n        sage: rep(\"(1,2,3,4,5,6)\")\n        Linear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n        [                1/2 -0.866025403784439?]\n        [ 0.866025403784439?                 1/2]\n        Representation space: Vector space of dimension 2 over Algebraic Field\n\n        sage: rep(\"(1,4)(2,3)(5,6)\")\n        Linear transformation associated with element g=(1,4)(2,3)(5,6), represented by the non-singular matrix:\n        [-1  0]\n        [ 0  1]\n        Representation space: Vector space of dimension 2 over Algebraic Field\n\n        sage: (rep.domain()).is_isomorphic(DihedralGroup(6))\n        True\n\n    Next we define the same representation where the field is choosed to be SR ::\n\n        sage: rep = representation(generators, matrices, field=SR)\n        sage: rep(\"(1,2,3,4,5,6)\")\n        Linear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n        [         1/2 -1/2*sqrt(3)]\n        [ 1/2*sqrt(3)          1/2]\n        Representation space: Vector space of dimension 2 over Symbolic Ring\n\n    We choose a random element of the group and show its matrix ::\n\n        sage: G = FiniteGroup(generators)\n        sage: g = G.an_element()\n        sage: rep(g)\n        Linear transformation associated with element g=(1,3)(4,6), represented by the non-singular matrix:\n        [        -1/2 -1/2*sqrt(3)]\n        [-1/2*sqrt(3)          1/2]\n        Representation space: Vector space of dimension 2 over Symbolic Ring\n\n    The identity and inverse properties of the representation are illustred ::\n\n        sage: e = G.identity()\n        sage: rep(e)\n        Linear transformation associated with element g=(), represented by the non-singular matrix:\n        [1 0]\n        [0 1]\n        Representation space: Vector space of dimension 2 over Symbolic Ring\n        sage: [rep(g.inverse())==rep(g).inverse() for g in G]\n        [True, True, True, True, True, True, True, True, True, True, True, True]\n\n\n    It is an error to choose the group element as a tuple ::\n\n        sage: rep((1,4)(2,3)(5,6))\n        TypeError: Traceback (most recent call last):\n        ...\n        TypeError: 'tuple' object is not callable\n\n        sage: rep((1,2,3,4,5,6))\n        TypeError: Traceback (most recent call last):\n        ...\n        TypeError:  'tuple' object is not callable\n\n    The argument can be a string or a list. Be aware that '(1,2,3,4,5,6)' is the usual\n    notation of cycle, while [1,2,3,4,5,6] lists the images of the permutation ::\n\n        sage: rep(\"(1,2,3,4,5,6)\")\n        Linear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n        [         1/2 -1/2*sqrt(3)]\n        [ 1/2*sqrt(3)          1/2]\n        Representation space: Vector space of dimension 2 over Symbolic Ring\n\n        sage: rep([1,2,3,4,5,6])\n        Linear transformation associated with element g=(), represented by the non-singular matrix:\n        [1 0]\n        [0 1]\n        Representation space: Vector space of dimension 2 over Symbolic Ring\n\n        sage: rep([2,3,4,5,6,1])\n        Linear transformation associated with element g=(1,2,3,4,5,6), represented by the non-singular matrix:\n        [         1/2 -1/2*sqrt(3)]\n        [ 1/2*sqrt(3)          1/2]\n        Representation space: Vector space of dimension 2 over Symbolic Ring       \n\n\n    REFERENCES:\n\n    For more information, see the following references:\n\n    - [Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.\n\n    - [Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.     \n\n    \"\"\"\n\n    G = FiniteGroup(generators, field)\n    identity = G.identity()\n    #matrices = [m.change_ring(field) for m in matrices] # NOTA: deixa o codigo lento\n    M = MatrixGroup(matrices)\n\n    if isinstance(generators[0], str):\n        generators = [G(libgap(g)) for g in generators]\n\n    n = (matrices[0]).nrows()\n    H = Hom(field**n, field**n)\n\n    @cached_function\n    def rep(g):\n        # Nota: Garantir que g pertence a classe FiniteGroup\n        if g == identity:\n            return Dg_Linear_Transformation(H, matrix.identity(n), g)\n        else:\n            A = factorization(g, generators, matrices)\n\n        return Dg_Linear_Transformation(H, A, g)\n\n    return MapRepresentation(Hom(G, M), rep)\n</code></pre>"},{"location":"api/#pysymmetry.get_block","title":"<code>pysymmetry.get_block(columm_base, matrix_equiv)</code>","text":"<p>Return the matricial representation of matrix_equiv when restricted to the subspace whose basis is columm_base.</p> <p>INPUT:</p> <ul> <li><code>columm_base</code> -- matrix ; a matrix(with full rank) whose columns are part of symmetry adapted basis.</li> <li><code>matrix_equiv</code> -- matrix ; a matrix an equivariant operator.</li> </ul> <p>OUTPUT: A matrix representing the restriction of matrix_equiv to the subespaces given by column_base.</p> <p>EXAMPLES:</p> <p>We define the representation by permutation on the cyclic group of four elements and calculates the blocks of an equivariant operator under this representation  ::</p> <pre><code>sage: G = FiniteGroup(CyclicPermutationGroup(4))\nsage: generators = G.gens()\nsage: matrices = [g.matrix() for g in generators]\nsage: rep = representation(generators, matrices)\nsage: subspaces = G.base_change_eigenvalue_reduction_new(rep) #The Invariant Subspaces\nsage: A = matrix.circulant([1,2,3,4]); #An equivariant Operator \nsage: rep.is_equivariant_to(A)\nTrue\nsage: [get_block(k[0],A) for k in subspaces[0]] # The block decomposition of the equivariant operator\n[[10], [-2], [-2 - 2*I], [-2 + 2*I]]\n</code></pre> <p>We define a representation on a permutation group, and calculates the blocks(no repetition) of an equivariant operator  ::</p> <pre><code>sage: G = FiniteGroup(['(2,4)(3,7)(6,8)', '(1,3)(4,6)(7,9)'])\nsage: gens = G.gens()\nsage: matrices = [g.matrix() for g in gens]\nsage: rep = representation(gens, matrices)\nsage: operator = matrix([[ 4, -1, -0, -1, -0, -0, -0, -0, -0],\n                        [-1,  4, -1, -0, -1, -0, -0, -0, -0],\n                        [-0, -1,  4, -0, -0, -1, -0, -0, -0],\n                        [-1, -0, -0,  4, -1, -0, -1, -0, -0],\n                        [-0, -1, -0, -1,  4, -1, -0, -1, -0],\n                        [-0, -0, -1, -0, -1,  4, -0, -0, -1],\n                        [-0, -0, -0, -1, -0, -0,  4, -1, -0],\n                        [-0, -0, -0, -0, -1, -0, -1,  4, -1],\n                        [-0, -0, -0, -0, -0, -1, -0, -1,  4]])  #An equivariant Operator \nsage: rep.is_equivariant_to(operator)\nTrue\nsage: subspaces = G.base_change_eigenvalue_reduction_new(rep) #The Invariant Subspaces\nsage: [get_block(k[0],operator) for k in subspaces[0]] # The block decomposition of the equivariant operator\n[\n[ 4 -2  0]                   \n[-2  4 -4]            [ 4 -1]\n[ 0 -1  4], [4], [4], [-2  4]\n]\n\n#NOTE: It is worth to note, in this case, that the two equal blocks [4], comes from inequivalent subrepresentations.\nIn this case, the theory has not way to foresee that.\n</code></pre> <p>We define the regular representation(reg) over the symmetric group of 3 simbols and calculate the blocks of an equivariant operator without repetition ::</p> <pre><code>sage: H = SymmetricGroup(3)\nsage: G = FiniteGroup(H);\nsage: reg = G.regular_representation();\nsage: Id = matrix.identity(reg.degree()); # Identity matrix\nsage: reg.is_equivariant_to(Id)\nTrue\nsage: subspaces = G.base_change_eigenvalue_reduction_new(reg) #The Invariant Subspaces\nsage: [get_block(k[0],Id) for k in subspaces[0]] # The block decomposition of the equivariant operator\n[\n[1], [1],\n\n[1.000000000000000? + 0.?e-18*I                              0]\n[                             0 1.000000000000000? + 0.?e-18*I]\n]\n</code></pre> <p>REFERENCES:</p> <p>For more information, see the following references:</p> <ul> <li> <p>[Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.</p> </li> <li> <p>[Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.</p> </li> </ul> Source code in <code>pysymmetry/pysymmetry.py</code> <pre><code>def get_block(columm_base, matrix_equiv): # Nota: traduzir nome das variaveis\n    r\"\"\"\n    Return the matricial representation of matrix_equiv when restricted to the subspace whose basis is columm_base.\n\n\n    INPUT:\n\n    - ``columm_base`` -- matrix ; a matrix(with full rank) whose columns are part of symmetry adapted basis.\n    - ``matrix_equiv`` -- matrix ; a matrix an equivariant operator.\n\n    OUTPUT: A matrix representing the restriction of matrix_equiv to the subespaces given by column_base.\n\n    EXAMPLES:\n\n\n    We define the representation by permutation on the cyclic group of four elements and calculates the blocks of an equivariant operator under this representation  ::\n\n        sage: G = FiniteGroup(CyclicPermutationGroup(4))\n        sage: generators = G.gens()\n        sage: matrices = [g.matrix() for g in generators]\n        sage: rep = representation(generators, matrices)\n        sage: subspaces = G.base_change_eigenvalue_reduction_new(rep) #The Invariant Subspaces\n        sage: A = matrix.circulant([1,2,3,4]); #An equivariant Operator \n        sage: rep.is_equivariant_to(A)\n        True\n        sage: [get_block(k[0],A) for k in subspaces[0]] # The block decomposition of the equivariant operator\n        [[10], [-2], [-2 - 2*I], [-2 + 2*I]]\n\n\n    We define a representation on a permutation group, and calculates the blocks(no repetition) of an equivariant operator  ::\n\n        sage: G = FiniteGroup(['(2,4)(3,7)(6,8)', '(1,3)(4,6)(7,9)'])\n        sage: gens = G.gens()\n        sage: matrices = [g.matrix() for g in gens]\n        sage: rep = representation(gens, matrices)\n        sage: operator = matrix([[ 4, -1, -0, -1, -0, -0, -0, -0, -0],\n                                [-1,  4, -1, -0, -1, -0, -0, -0, -0],\n                                [-0, -1,  4, -0, -0, -1, -0, -0, -0],\n                                [-1, -0, -0,  4, -1, -0, -1, -0, -0],\n                                [-0, -1, -0, -1,  4, -1, -0, -1, -0],\n                                [-0, -0, -1, -0, -1,  4, -0, -0, -1],\n                                [-0, -0, -0, -1, -0, -0,  4, -1, -0],\n                                [-0, -0, -0, -0, -1, -0, -1,  4, -1],\n                                [-0, -0, -0, -0, -0, -1, -0, -1,  4]])  #An equivariant Operator \n        sage: rep.is_equivariant_to(operator)\n        True\n        sage: subspaces = G.base_change_eigenvalue_reduction_new(rep) #The Invariant Subspaces\n        sage: [get_block(k[0],operator) for k in subspaces[0]] # The block decomposition of the equivariant operator\n        [\n        [ 4 -2  0]                   \n        [-2  4 -4]            [ 4 -1]\n        [ 0 -1  4], [4], [4], [-2  4]\n        ]\n\n        #NOTE: It is worth to note, in this case, that the two equal blocks [4], comes from inequivalent subrepresentations.\n        In this case, the theory has not way to foresee that.\n\n    We define the regular representation(reg) over the symmetric group of 3 simbols and calculate the blocks of an equivariant operator without repetition ::\n\n        sage: H = SymmetricGroup(3)\n        sage: G = FiniteGroup(H);\n        sage: reg = G.regular_representation();\n        sage: Id = matrix.identity(reg.degree()); # Identity matrix\n        sage: reg.is_equivariant_to(Id)\n        True\n        sage: subspaces = G.base_change_eigenvalue_reduction_new(reg) #The Invariant Subspaces\n        sage: [get_block(k[0],Id) for k in subspaces[0]] # The block decomposition of the equivariant operator\n        [\n        [1], [1],\n\n        [1.000000000000000? + 0.?e-18*I                              0]\n        [                             0 1.000000000000000? + 0.?e-18*I]\n        ]\n\n\n    REFERENCES:\n\n    For more information, see the following references:\n\n    - [Ser1977]_Serre, Jean-Pierre. Linear representations of finite groups. Vol. 42. New York: springer, 1977.\n\n    - [Sti2012]_Stiefel, E., and A. F\u00e4ssler. FiniteGroup theoretical methods and their applications. Springer Science &amp; Business Media, 2012.     \n\n    \"\"\"\n    columm_pinv = columm_base.pseudoinverse()\n    block = columm_pinv*matrix_equiv*columm_base\n    return block\n</code></pre>"},{"location":"api/#pde-numerical-module-pde","title":"PDE &amp; Numerical Module (<code>pde</code>)","text":"<p>This module contains specialized, performance-oriented classes and functions, often used for numerical applications like solving partial differential equations.</p>"},{"location":"api/#pysymmetry.pde.nGroup","title":"<code>pysymmetry.pde.nGroup = ngroup</code>  <code>module-attribute</code>","text":""},{"location":"api/#utilities-module-util","title":"Utilities Module (<code>util</code>)","text":"<p>This module provides helper functions for creating common matrices and other utilities.</p>"},{"location":"api/#pysymmetry.util.laplacian1d","title":"<code>pysymmetry.util.laplacian1d(n, h=1)</code>","text":"Source code in <code>pysymmetry/util.py</code> <pre><code>def laplacian1d(n, h=1):\n    x= np.arange(n)\n    # h grid width\n    #h= #x[width]\n    ones=np.ones(n)\n\n    # creating laplace stencil 1/h^2 [1 -2 1] csr format\n    data = 1/(h*h)*np.array([ones,-2*ones,ones])\n    diags = np.array([-1, 0, 1])\n    A = spdiags(data, diags, n, n, format=\"csc\")\n    return A\n</code></pre>"},{"location":"api/#pysymmetry.util.laplacian2d","title":"<code>pysymmetry.util.laplacian2d(n)</code>","text":"<p>Return matrix A for 2D Laplace equation using block diagonal structure, given the number of unknowns \u2019n\u2019 in each direction.</p> Source code in <code>pysymmetry/util.py</code> <pre><code>def laplacian2d(n):\n    \"\"\"Return matrix A for 2D Laplace equation using block diagonal\n    structure, given the number of unknowns \u2019n\u2019 in each direction.\n    \"\"\"\n    Bdiag = -4 * np.eye(n)\n    Bupper = np.diag([1] * (n - 1), 1)\n    Blower = np.diag([1] * (n - 1), -1)\n    B = Bdiag + Bupper + Blower\n    # Creat a list [B,B,B,...,B] with n Bs\n    blst = [B] * n\n    # Unpack the list of diagonal blocks \u2019blst\u2019\n    # since block_diag expects each block to be passed as separate\n    # arguments. This is the same as doing block_diag(B,B,B,...,B)\n    A = block_diag(*blst)\n    # Upper diagonal array offset by n: we\u2019ve got (n-1) I blocks\n    # each containing n ones\n    Dupper = np.diag(np.ones(n * (n - 1)), n)\n    # Lower diagonal array offset by -n\n    Dlower = np.diag(np.ones(n * (n - 1)), -n)\n    A += Dupper + Dlower\n    return csc_matrix(-A)\n</code></pre>"},{"location":"api/#parallel-processing-parallel","title":"Parallel Processing (<code>parallel</code>)","text":"<p>This module contains tools for parallelizing computations to improve performance on multi-core systems.</p>"},{"location":"api/#pysymmetry.parallel.pmap","title":"<code>pysymmetry.parallel.pmap(f, X, nprocs=cpu_count())</code>","text":"Source code in <code>pysymmetry/parallel.py</code> <pre><code>def pmap(f, X, nprocs = cpu_count()):\n    q_in   = Queue(True)\n    q_out  = Queue()\n\n    proc = [Process(target=spawn(f),args=(q_in, q_out)) for _ in range(nprocs)]\n    for p in proc:\n        p.daemon = True\n        p.start()\n        proc\n\n    [q_in.put((i,x)) for i,x in enumerate(X)]\n    [q_in.put((None,None)) for _ in range(nprocs)]\n\n    result = [q_out.get() for _ in range(len(X))]\n\n    [p.join() for p in proc]\n    result = [x for i,x in sorted(result)]\n    return result\n</code></pre>"},{"location":"api/#pysymmetry.parallel.pmap_reduce","title":"<code>pysymmetry.parallel.pmap_reduce(f, X, fun=add, nprocs=cpu_count())</code>","text":"Source code in <code>pysymmetry/parallel.py</code> <pre><code>def pmap_reduce(f, X, fun=add, nprocs = cpu_count()):\n    q_in   = Queue(True)\n    q_out  = Queue()\n    proc = [Process(target=spawn_reduce(f, fun),args=(q_in, q_out)) for _ in range(nprocs)]\n    for p in proc:\n        p.daemon = True\n        p.start()\n        proc\n\n    [q_in.put((i,x)) for i,x in enumerate(X)]\n    [q_in.put((None,None)) for _ in range(nprocs)]\n\n    result = None\n    for _ in range(nprocs):\n        partial = q_out.get()\n        if partial is not None:\n            if result is None:\n                result = partial\n            else:\n                result = fun(result, partial)\n\n    [p.join() for p in proc]\n    return result\n</code></pre>"}]}