{"backend_state":"running","kernel":"sage-9.0","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":232071168},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0b76b7","input":"","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"880868","input":"import sys \nsys.path.append('/home/user/')","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"30ec70","input":"from pysymmetry_dev01 import *\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom multiprocessing import Pool\n\nfont = {'family' : 'sans-serif', 'size' : 14}\nplt.rc('font', **font)\nplt.rc('lines', linewidth=2)\n","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"81caa5","input":"def bar_plot(t_process, blocks_plus_process, t_full, labels):    \n   \n    x = np.arange(len(labels))  # the label locations\n    width = 0.35  # the width of the bars\n\n    fig, ax = plt.subplots(figsize=(15,10))\n    rects1 = ax.bar(x ,  blocks_plus_process, width, label='Bocks')\n    rects2 = ax.bar(x, t_process, width, label='Preprocessing')\n    \n    rects3 = ax.bar(x+ width ,t_full , width, label='Full matrix')\n    \n    ax.set_ylabel('time in seconds')\n    ax.set_xlabel('size matrix')\n    ax.set_title('Time by algorithm')\n    ax.set_xticks(x+ width/2)\n    ax.set_xticklabels(labels)\n    ax.legend()\n    #ax.grid()\n    \n    \n    def autolabel(rects):\n        \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n        for rect in rects:\n            height = round(rect.get_height(),1)\n            ax.annotate('{}'.format(height),\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 3),  # 3 points vertical offset\n                        textcoords=\"offset points\",\n                        ha='center', va='bottom')\n    autolabel(rects1)\n    #autolabel(rects2)\n    autolabel(rects3)\n\n    #fig.tight_layout()\n    #ig.figure(figsize=(15,10))\n\n    plt.show()\n    \n    \ndef generators2d(n):#Nota:temporario\n\n    string_reflexao_sigma = ''\n    for j in range(1,(n/2+1).floor()):\n        for k in range(0,n):\n            string_reflexao_sigma = string_reflexao_sigma + str((k*n+j,k*n+n-j+1))\n    \n    string_reflexao_miDp = ''\n    for i in range(1, n):\n        for j in range(i+1, n+1):            \n            string_reflexao_miDp = string_reflexao_miDp + str(((i-1)*n+j,(j-1)*n+i))\n            \n    return [string_reflexao_sigma, string_reflexao_miDp]\n    \ndef eig(m):\n    return np.linalg.eigvals(m)\ndef eigh(m):\n    return np.linalg.eigvalsh(m)\n    ","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"e2fadb","input":"t = Timer()\ns = Timer()","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"b793ae","input":"nmin = 60\nnmax = 90\nstep = 5\n\nsize = np.arange(nmin, nmax + step, step);","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"fb4d0f","input":"# # Timers\n# nmin = 60\n# nmax = 90\n# step = 5\n\nt_process = []\nt_blocks_plus_process = []\nt_full = []\nfor n in size:\n    \n    M = laplacian2d(n)\n    print('n = ' + str(n))\n    print('time preprocessing')\n    s.start()\n    G = nGroup(generators2d(ZZ(n)))\n    gens = G.gens()\n    img = [g.matrix() for g in gens]\n    r = G.nrepresentation(gens, img)\n    base = G.nbase_change_reduction(r)\n    blocks = base.get_blocks(M)\n    tpp = s.stop()\n    t_process.append(tpp)\n    \n    M = M.toarray()\n    \n    print('times values blocks')\n    blocks = [b.toarray() for b in blocks] \n    if __name__ == '__main__':        \n        with Pool(3) as p:\n            s.start()\n            v = [p.apply_async(eig,  args=(b,)) for b in blocks]\n            values = [p.get() for p in v]\n            tbl = s.stop()\n    t_blocks_plus_process.append(tbl + tpp)\n    print('values full matrix')\n    t.start()\n    v = eigh(M)\n    tf = t.stop()\n    t_full.append(tf)","output":{"0":{"name":"stdout","output_type":"stream","text":"n = 60\ntime preprocessing\n"},"1":{"name":"stdout","output_type":"stream","text":"Elapsed time: 17.2010 seconds\ntimes values blocks\n"},"10":{"name":"stdout","output_type":"stream","text":"Elapsed time: 3.4091 seconds\nvalues full matrix\n"},"11":{"name":"stdout","output_type":"stream","text":"Elapsed time: 49.9162 seconds\n"},"12":{"name":"stdout","output_type":"stream","text":"n = 75\ntime preprocessing\n"},"13":{"name":"stdout","output_type":"stream","text":"Elapsed time: 31.3199 seconds\ntimes values blocks\n"},"14":{"name":"stdout","output_type":"stream","text":"Elapsed time: 5.0984 seconds\nvalues full matrix\n"},"15":{"name":"stdout","output_type":"stream","text":"Elapsed time: 73.2384 seconds\n"},"16":{"name":"stdout","output_type":"stream","text":"n = 80\ntime preprocessing\n"},"17":{"name":"stdout","output_type":"stream","text":"Elapsed time: 44.4288 seconds\ntimes values blocks\n"},"18":{"name":"stdout","output_type":"stream","text":"Elapsed time: 6.7353 seconds\nvalues full matrix\n"},"19":{"name":"stdout","output_type":"stream","text":"Elapsed time: 104.8155 seconds\n"},"2":{"name":"stdout","output_type":"stream","text":"Elapsed time: 1.4766 seconds\nvalues full matrix\n"},"20":{"name":"stdout","output_type":"stream","text":"n = 85\ntime preprocessing\n"},"21":{"name":"stdout","output_type":"stream","text":"Elapsed time: 56.6882 seconds\ntimes values blocks\n"},"22":{"name":"stdout","output_type":"stream","text":"Elapsed time: 9.1884 seconds\nvalues full matrix\n"},"23":{"name":"stdout","output_type":"stream","text":"Elapsed time: 149.0812 seconds\n"},"24":{"name":"stdout","output_type":"stream","text":"n = 90\ntime preprocessing\n"},"25":{"name":"stdout","output_type":"stream","text":"Elapsed time: 77.5856 seconds\ntimes values blocks\n"},"26":{"name":"stdout","output_type":"stream","text":"Elapsed time: 13.9809 seconds\nvalues full matrix\n"},"27":{"name":"stdout","output_type":"stream","text":"Elapsed time: 209.9340 seconds\n"},"3":{"name":"stdout","output_type":"stream","text":"Elapsed time: 19.1034 seconds\n"},"4":{"name":"stdout","output_type":"stream","text":"n = 65\ntime preprocessing\n"},"5":{"name":"stdout","output_type":"stream","text":"Elapsed time: 19.2991 seconds\ntimes values blocks\n"},"6":{"name":"stdout","output_type":"stream","text":"Elapsed time: 2.5130 seconds\nvalues full matrix\n"},"7":{"name":"stdout","output_type":"stream","text":"Elapsed time: 30.4227 seconds\n"},"8":{"name":"stdout","output_type":"stream","text":"n = 70\ntime preprocessing\n"},"9":{"name":"stdout","output_type":"stream","text":"Elapsed time: 24.2793 seconds\ntimes values blocks\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"456159","input":"labels = [str(k) + ' x ' + str(k) for k in size**2]\nbar_plot(t_process, t_blocks_plus_process, t_full, labels)   ","output":{"0":{"data":{"image/png":"933c55cd5e6b6250d2cb7ba98bee322ad5b02a19","text/plain":"<Figure size 1080x720 with 1 Axes>"},"exec_count":7,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"f0ce9a","input":"fig, ax = plt.subplots(figsize=(15,10))\nax.plot(labels,t_blocks_plus_process, label ='preprocess and  blocks')\nax.legend()\nax.plot(labels,t_full, label='full matrix')\nax.legend()\nax.set_ylabel('time in seconds')\nax.set_xlabel('size matrix')\nax.grid()\nplt.show()","output":{"0":{"data":{"image/png":"6bfa957ac34e8db6e0c7d7e72acf5b281c03376c","text/plain":"<Figure size 1080x720 with 1 Axes>"},"exec_count":8,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"id":0,"time":1594353898795,"type":"user"}
{"last_load":1594342385052,"type":"file"}